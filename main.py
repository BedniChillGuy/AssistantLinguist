import asyncio
import logging
import sqlite3
from random import randint
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InputFile, ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton
import re

menu = ReplyKeyboardMarkup(keyboard=[

        [KeyboardButton(text="–ù–∞—á–∞—Ç—å"),
        KeyboardButton(text="–ü–æ–º–æ—â—å")],
        [KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫'),
        KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –∏–∑—É—á–µ–Ω–∏—è")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        KeyboardButton(text='–°—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')]

], resize_keyboard=True, one_time_keyboard=False)

language_choose = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß", callback_data="lang_en"),
        InlineKeyboardButton(text="–ù–µ–º–µ—Ü–∫–∏–π üá©üá™", callback_data="lang_de"),
        InlineKeyboardButton(text="–ò—Å–ø–∞–Ω—Å–∫–∏–π üá™üá¶", callback_data="lang_ea"),
    ],
    [
        InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_lang")
    ]
])

activity_choose = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–¢–µ—Å—Ç üìù", callback_data="test"),
        InlineKeyboardButton(text="–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üìñ", callback_data="learn_words"),
        InlineKeyboardButton(text="–£—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üìö", callback_data="learn_rules")
    ],
    [
        InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_act")
    ]
])

restart_button = InlineKeyboardMarkup(inline_keyboard=[
    [
    ],
    [
        InlineKeyboardButton(text="–°—Ç–µ—Ä–µ—Ç—å", callback_data="restart"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ]
])


class DataBase:
    def __init__(self):
        self.db_path = "main_data.db"
        self._create_tables()

    def _create_tables(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    is_new BOOL
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_statistic (
                    user_id INTEGER PRIMARY KEY,
                    current_language TEXT DEFAULT '–Ω–µ—Ç',
                    waiting_for_answers BOOLEAN DEFAULT 0, 
                    tests_solved INTEGER DEFAULT '0',
                    test_answers TEXT,
                    FOREIGN KEY(user_id) REFERENCES users(user_id)
                )
            """)
            cursor.execute("""
                            CREATE TABLE IF NOT EXISTS english_tests (
                                test_number INTEGER,
                                test_theme TEXT,
                                test TEXT,
                                correct_answers TEXT

                            )
                        """)
            conn.commit()
            cursor.execute("""
                                        CREATE TABLE IF NOT EXISTS german_tests (
                                            test_number INTEGER,
                                            test_theme TEXT,
                                            test TEXT,
                                            correct_answers TEXT

                                        )
                                    """)
            conn.commit()
            cursor.execute("""
                                                    CREATE TABLE IF NOT EXISTS spanish_tests (
                                                        test_number INTEGER,
                                                        test_theme TEXT,
                                                        test TEXT,
                                                        correct_answers TEXT

                                                    )
                                                """)
            conn.commit()
            cursor.execute("""
                                        CREATE TABLE IF NOT EXISTS theory (
                                            language TEXT,
                                            site TEXT,
                                            words TEXT

                                        )
                                    """)
            conn.commit()

    def show_test(self, value, table):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(f"SELECT test FROM {table} WHERE test_number = ?", (value,))
                result = cursor.fetchone()
                return result if result else None
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return None

    def _get_connection(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_path)

    def add_new_data(self, table, form, *rows):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(f"INSERT OR REPLACE INTO {table} VALUES{form}", (rows))
                conn.commit()
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def delete_data(self, user_id):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute("DELETE FROM user_statistic WHERE user_id = ?", (user_id,))
                cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
                conn.commit()
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def choose_data(self, table, searched_obj, row, value):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(f"SELECT {searched_obj} FROM {table} WHERE {row} = ?", (value,))
                result = cursor.fetchone()
                return result[0] if result else None
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return None


class AssistantLinguist:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self._register_handlers()
        self.language_menu = language_choose
        self.activity_menu = activity_choose
        self.restart_menu = restart_button
        self.main_menu = menu
        self.comands = ["–ù–∞—á–∞—Ç—å", "–ü–æ–º–æ—â—å", "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫", "–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –∏–∑—É—á–µ–Ω–∏—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "–°—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"]


    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.dp.message.register(self._send_welcome, Command("start"))
        self.dp.message.register(self._send_help, Command("help"))
        self.dp.message.register(self._send_restart, Command("restart"))
        self.dp.message.register(self._send_stats, Command("stats"))
        self.dp.message.register(self._send_language_list, Command("language"))
        self.dp.message.register(self._send_activity_list, Command("activity"))

        self.dp.message.register(self._handle_message)
        self.dp.message.register(self._show_test)

        self.dp.callback_query.register(self._handle_language_buttons,
                                        lambda c: c.data in ["lang_en", "lang_de", "lang_ea", "help_lang"])
        self.dp.callback_query.register(self._handle_activity_buttons,
                                        lambda c: c.data in ["test", "learn_words", "learn_rules", "help_act"])
        self.dp.callback_query.register(self._handle_restart_button,
                                        lambda c: c.data in ["restart", "cancel"])

    async def _send_stats(self, message: types.Message):
        user_id = message.from_user.id
        lang = DB.choose_data("user_statistic", "current_language", "user_id", user_id)
        tests_count = (DB.choose_data("user_statistic", "tests_solved", "user_id", user_id))
        if DB.choose_data("user_statistic", "user_id", "user_id", user_id) is None:
            stats = ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        else:
            stats = (
                "–í–æ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f'–¢–µ–∫—É—â–∏–π –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫: {lang}\n'
                f'—Ç–µ—Å—Ç–æ–≤, —Ä–µ—à–µ–Ω–Ω—ã—Ö –±–µ–∑ –æ—à–∏–±–æ–∫: {tests_count}'

            )
        await message.answer(stats)

    async def _send_activity_list(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        user_id = message.from_user.id
        lang = (DB.choose_data("user_statistic", "current_language", "user_id", user_id))
        if lang is not None and lang != "–Ω–µ—Ç":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞", reply_markup=self.activity_menu)
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")

    async def _send_language_list(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        user_id = message.from_user.id
        if DB.choose_data("user_statistic", "user_id", "user_id", user_id) is None:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:", reply_markup=self.language_menu)

    async def _send_restart(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–µ—Ä–µ—Ç—å –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å?", reply_markup=self.restart_menu)



    async def _handle_restart_button(self, callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id
        await self.bot.delete_message(chat_id=user_id, message_id=message_id)
        if data == "restart":

            DB.delete_data(user_id)
            await self.bot.send_message(user_id, "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–µ—Ä—Ç!")
            self.messages_count = 0
        elif data == "cancel":
            await self.bot.send_message(user_id,
                                        "–•–æ—Ä–æ—à–æ, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ! üòâ")

    async def _handle_activity_buttons(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        data = callback_query.data
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id

        try:
            await self.bot.delete_message(chat_id=user_id, message_id=message_id)
            lang = DB.choose_data("user_statistic", "current_language", "user_id", user_id)
            tests_count = (DB.choose_data("user_statistic", "tests_solved", "user_id", user_id))
            DB.add_new_data("user_statistic", "(?, ?, ?, ?, ?)", user_id, lang, False, tests_count, None)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        if data == "test":
            await self._show_test(callback_query)
        elif data == "learn_words":
            words = DB.choose_data("theory", "words", "language", lang)
            words_lst = []
            for row in words.split("\n"):
                line = "".join(str(item) for item in row)
                words_lst.append(line)
            await self.bot.send_message(user_id, '\n'.join(words_lst))
        elif data == "learn_rules":

            site = DB.choose_data("theory", "site", "language", lang)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=site)]
            ])
            await self.bot.send_message(
                callback_query.from_user.id,
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞: {site}",
                reply_markup=markup
            )
        elif data == "help_act":
            await self.bot.send_message(user_id,
                                        "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–± –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫")

        await callback_query.answer()

    async def _show_test(self, callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        test_number = randint(1, 5)
        lang = DB.choose_data("user_statistic", "current_language", "user_id", user_id)
        if lang == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
            theme = DB.choose_data("english_tests", "test_theme", "test_number", test_number)
            test_data = DB.show_test(test_number, "english_tests")
            correct_answers = DB.choose_data("english_tests", "correct_answers", "test_number", test_number)
        elif lang == "–ù–µ–º–µ—Ü–∫–∏–π":
            theme = DB.choose_data("german_tests", "test_theme", "test_number", test_number)
            test_data = DB.show_test(test_number, "german_tests")
            correct_answers = DB.choose_data("german_tests", "correct_answers", "test_number", test_number)
        elif lang == "–ò—Å–ø–∞–Ω—Å–∫–∏–π":
            theme = DB.choose_data("spanish_tests", "test_theme", "test_number", test_number)
            test_data = DB.show_test(test_number, "spanish_tests")
            correct_answers = DB.choose_data("spanish_tests", "correct_answers", "test_number", test_number)

        tests_count = (DB.choose_data("user_statistic", "tests_solved", "user_id", user_id))
        DB.add_new_data("user_statistic", "(?, ?, ?, ?, ?)", user_id, lang, True, tests_count, correct_answers)
        message_lines = [f"–¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ {theme}:"]


        for row in test_data:
            line = "".join(str(item) for item in row)
            message_lines.append(line)

        message_lines.append('\n' +
            '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∏–∂–µ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')

        await self.bot.send_message(user_id, "\n".join(message_lines))
        await callback_query.answer()

    async def _handle_language_buttons(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        data = callback_query.data
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id

        await self.bot.delete_message(chat_id=user_id, message_id=message_id)

        if data == "lang_en":
            Choosed_lang = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
            await self.bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫! üá¨üáß")
        elif data == "lang_de":
            Choosed_lang = "–ù–µ–º–µ—Ü–∫–∏–π"
            await self.bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫! üá©üá™")
        elif data == "lang_ea":
            Choosed_lang = "–ò—Å–ø–∞–Ω—Å–∫–∏–π"
            await self.bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫! üá™üá¶")

        elif data == "help_lang":

            await self.bot.send_message(user_id,
                                        "–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏ –∏ –∏–∑—É—á–∞—Ç—å –∏—Ö! ")

        tests_count = (DB.choose_data("user_statistic", "tests_solved", "user_id", user_id))
        DB.add_new_data("user_statistic", "(?, ?, ?, ?, ?)", user_id, Choosed_lang, False, tests_count, None)
        await callback_query.answer()


    async def _handle_message(self, message: types.Message):
        user_id = message.from_user.id
        if DB.choose_data("user_statistic", "waiting_for_answers", "user_id", user_id) and message.text.split('\n')[0] not in self.comands:
            user_answers = message.text.split('\n')

            checked_message = []
            correct = 0
            test_ans = DB.choose_data("user_statistic", "test_answers", "user_id", user_id).split('\n')
            if len(user_answers) < len(test_ans):
                for i in range(len(test_ans) - len(user_answers)):
                    user_answers.append("")
            for i in range(len(test_ans)):
                s = re.sub("[^A-Za-z]", "", user_answers[i].strip()).lower()
                s2 = re.sub("[^A-Za-z]", "", test_ans[i].strip()).lower()
                if s == s2:
                    checked_message.append(f"{test_ans[i]} ‚úÖ –í–µ—Ä–Ω–æ!")
                    correct += 1
                else:
                    checked_message.append(f"{user_answers[i]} ‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {test_ans[i]}")

            await message.answer("\n".join(checked_message))
            test_count = (DB.choose_data("user_statistic", "tests_solved", "user_id", user_id))
            Choosed_lang = (DB.choose_data("user_statistic", "current_language", "user_id", user_id))
            if correct == len(test_ans):
                test_count += 1
            DB.add_new_data("user_statistic", "(?, ?, ?, ?, ?)", user_id, Choosed_lang, False, test_count, None)
        else:
            text = message.text.lower()
            if DB.choose_data("user_statistic", "user_id", "user_id", user_id):
                test_count = (DB.choose_data("user_statistic", "tests_solved", "user_id", user_id))
                Choosed_lang = (DB.choose_data("user_statistic", "current_language", "user_id", user_id))
                DB.add_new_data("user_statistic", "(?, ?, ?, ?, ?)", user_id, Choosed_lang, False, test_count, None)
            if text == "–Ω–∞—á–∞—Ç—å":
                await self._send_welcome(message)
            elif text == "–ø–æ–º–æ—â—å":
                await self._send_help(message)
            elif text == "–≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫":
                await self._send_language_list(message)
            elif text == "–≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –∏–∑—É—á–µ–Ω–∏—è":
                await self._send_activity_list(message)
            elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
                await self._send_stats(message)
            elif text == "—Å—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
                await self._send_restart(message)
            else:
                await message.answer(
                    f"–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.")


    async def _send_welcome(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

        user_id = message.from_user.id
        user = message.from_user
        username = user.first_name

        DB.add_new_data("users", "(?, ?)", user_id, username)
        if DB.choose_data("user_statistic", "user_id", "user_id", user_id) is None:
            DB.add_new_data("user_statistic", "(?, ?, ?, ?, ?)", user_id, '–Ω–µ—Ç', False, 0, None)

        start_msg = f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n" \
                          f"–Ø ‚Äì –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤! üåçüìö\n\n" \
                          f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n" \
                          f"–í –º–æ–µ–π –±–∞–∑–µ —Å–æ–±—Ä–∞–Ω—ã –ø–æ–ª–µ–∑–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π\n" \
                          f"–¢–∞–∫–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å—é —Ç–µ–æ—Ä–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —è–∑—ã–∫–∞!\n" \
                          f"–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? –í—Å–µ –ø—Ä–æ—Å—Ç–æ!\n" \
                          f"–í—ã–±–∏—Ä–∞–π—Ç–µ —è–∑—ã–∫\n" \
                          f"–†–µ—à–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –∏ –∏–∑—É—á–∞–π—Ç–µ —Ç–µ–æ—Ä–∏—é\n" \
                          f"–£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –¥–µ–Ω—å –∑–∞ –¥–Ω—ë–º!\n\n" \
                          f"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü–æ–µ—Ö–∞–ª–∏! üöÄ\n\n" \
                          f"(–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å. –¥–æ—Å—Ç—É–ø–Ω—ã —Ç—Ä–∏ —è–∑—ã–∫–∞: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π –∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π) üòä\n"

        await message.answer(start_msg, reply_markup=self.main_menu)

    async def _send_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ø–æ–º–æ—â—å\n"
            "/language - –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n"
            "/activity - –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "/restart - —Å—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "/stats - –ø—Ä–æ–≥—Ä–µ—Å—Å"
        )
        await message.answer(help_text)

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""

        try:
            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            await self.dp.start_polling(self.bot)
        finally:
            await self.bot.close()


if __name__ == '__main__':
    """–≤–º–µ—Å—Ç–æ TOKEN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    DB = DataBase()

    API_TOKEN = TOKEN
    logging.basicConfig(level=logging.INFO)
    app = AssistantLinguist(API_TOKEN)

    asyncio.run(app.start())
